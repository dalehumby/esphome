# Lilygo T5 4.7 inch epaper display: Clock, calendar and current weather
# Weather icon help from https://community.home-assistant.io/t/display-materialdesign-icons-on-esphome-attached-to-screen/199790/16

esphome:
  name: epaper47
  includes:
    - weather_icon_map.h

esp32:
  board: esp32dev
  framework:
    type: arduino

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
      manual_ip:
        static_ip: 10.0.0.133
        gateway: 10.0.0.1
        subnet: 255.255.255.0
        dns1: 10.0.0.1
    - ssid: !secret work_wifi_ssid
      password: !secret work_wifi_password
  ap:
    ssid: "Fallback Hotspot"
    password: !secret fallback_password

captive_portal:

mqtt:
  broker: !secret mqtt_broker
  port: !secret mqtt_port
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: false
  on_message:
    - topic: epaper/atwork
      then: 
        - display.page.show: !lambda |-
            int atwork = atoi(x.c_str());
            switch(atwork) {
              case 0:
                return id(standby);
              case 1:
                return id(home);
              case 2:
                return id(black);
              case 3:
                return id(blank);
              default:
                return id(standby);
            }

logger:

ota:

time:
  - platform: sntp
    id: tm
    timezone: "Europe/Stockholm"
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - component.update: epaper
    on_time_sync:
      - then:
        - component.update: epaper  # TODO comment out once working

font:
  - file: "gfonts://Roboto"
    id: font_std
    size: 30
    glyphs: "!\"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/\\[]|&@#'’åäéöøú"
  - file: "gfonts://Roboto@700"
    id: font_media_title
    size: 30
    glyphs: "!\"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/\\[]|&@#'’åäéöøú"
  - file: "gfonts://Roboto"
    id: font_clock
    size: 150
    glyphs: "-0123456789:° "
  - file: fonts/FLIPclockblack.ttf
    id: flipclock
    size: 350
    glyphs: "0123456789:"
  - file: fonts/lcd.ttf
    id: lcd
    size: 350
    glyphs: "0123456789:"
  - file: "gfonts://Noto Sans Mono"
    id: font_symbol
    size: 30
    glyphs: "-.0123456789° ▲▼▁▂▃▄▅▆▇█▓"
  - file: fonts/materialdesignicons-webfont.ttf
    id: mdi_calendar
    size: 30
    glyphs:
      - "\U000F00ED" # calendar
  - file: fonts/materialdesignicons-webfont.ttf
    id: mdi_weather
    size: 150
    glyphs:
      - "\U000F0590" # weather-cloudy
      - "\U000F0F2F" # weather-cloudy-alert
      - "\U000F0E6E" # weather-cloudy-arrow-right
      - "\U000F0591" # weather-fog
      - "\U000F0592" # weather-hail
      - "\U000F0F30" # weather-hazy
      - "\U000F0898" # weather-hurricane
      - "\U000F0593" # weather-lightning
      - "\U000F067E" # weather-lightning-rainy
      - "\U000F0594" # weather-night
      - "\U000F0F31" # weather-night-partly-cloudy
      - "\U000F0595" # weather-partly-cloudy
      - "\U000F0F32" # weather-partly-lightning
      - "\U000F0F33" # weather-partly-rainy
      - "\U000F0F34" # weather-partly-snowy
      - "\U000F0F35" # weather-partly-snowy-rainy
      - "\U000F0596" # weather-pouring
      - "\U000F0597" # weather-rainy
      - "\U000F0598" # weather-snowy
      - "\U000F0F36" # weather-snowy-heavy
      - "\U000F067F" # weather-snowy-rainy
      - "\U000F0599" # weather-sunny
      - "\U000F0F37" # weather-sunny-alert
      - "\U000F14E4" # weather-sunny-off
      - "\U000F059A" # weather-sunset
      - "\U000F059B" # weather-sunset-down
      - "\U000F059C" # weather-sunset-up
      - "\U000F0F38" # weather-tornado
      - "\U000F059D" # weather-windy
      - "\U000F059E" # weather-windy-variant
      - "\U000F04C7" # spotify

external_components:
  - source: github://ashald/esphome@lilygo-t5-47  #github://guillempages/esphome@patch-2
    components:
      - lilygo_t5_47
  - source: github://pr#3255
    components:
      - display
      - online_image

online_image:
  - url: !secret album_art_url
    id: album_image

display:
  - platform: lilygo_t5_47
    rotation: 180°
    update_interval: 10s
    full_update_every: 60
    id: epaper
    pages:
      - id: blank
        lambda: |-
          #define xres 960
          #define yres 540
          it.rectangle(0, 0, xres, yres);

      - id: black
        lambda: |-
          #define xres 960
          #define yres 540
          it.filled_rectangle(0, 0, xres, yres);

      - id: standby
        lambda: |-
          #define xres 960
          #define yres 540
          //it.strftime(xres/2, yres/2+25, id(lcd), TextAlign::CENTER, "%H:%M", id(tm).now());
          it.strftime(rand() % xres, rand() % yres, id(font_clock), TextAlign::CENTER, "%H:%M", id(tm).now());

      - id: home
        lambda: |-
          #define xres 960
          #define yres 540

          // Quadrants
          it.line(xres/2, 0, xres/2, yres);
          it.line(0, yres/2, xres, yres/2);


          // Date and time
          it.strftime(xres/4, yres/8, id(font_std), TextAlign::BOTTOM_CENTER, "%a, %e %b", id(tm).now());
          it.strftime(xres/4, yres/4, id(font_clock), TextAlign::CENTER, "%H:%M", id(tm).now());


          // Calendar
          #define xpad 20
          #define xcalendar (xres*6/12 + xpad)
          #define ylinespace 50

          //it.print(xres*3/4, yres/8, id(mdi_calendar), TextAlign::BOTTOM_CENTER, "\U000F00ED");
          it.print(xres*3/4, yres/8, id(font_std), TextAlign::BOTTOM_CENTER, "Up next");

          int y = yres/4 - ylinespace;
          it.print(xcalendar, y, id(font_std), TextAlign::CENTER_LEFT, "10:00  Stand-up");

          y += ylinespace;
          it.print(xcalendar, y, id(font_std), TextAlign::CENTER_LEFT, "10:20  Planning");

          y += ylinespace;
          it.print(xcalendar, y, id(font_std), TextAlign::CENTER_LEFT, "11:30  Dale / Manuel 1on1");


          // Weather
          #define xweather xres*1/8
          #define xtemp xres*3/8

          // Rain sparkline
          y = yres*5/8;
          if (id(rainsparkline).has_state() && strcmp(id(rainsparkline).state.c_str(), "▁▁▁▁▁▁▁▁")) {
            it.printf(xweather, y, id(font_symbol), TextAlign::BOTTOM_CENTER, "%s", id(rainsparkline).state.c_str());
          } else {
            it.print(xweather, y, id(font_symbol), TextAlign::BOTTOM_CENTER, "         ");
          }

          // Weather icon and current temperature
          y = yres*6/8;
          if (id(weather).has_state()) {
            it.print(xweather, y, id(mdi_weather), TextAlign::CENTER, weather_icon_map[id(weather).state.c_str()].c_str());
          } else {
            it.print(xweather, y, id(mdi_weather), TextAlign::CENTER, "\U000F0597");
          }
          if (id(temperature).has_state()) {
            it.printf(xtemp, y, id(font_clock), TextAlign::CENTER, "%.0f°", id(temperature).state);
          } else {
            it.print(xtemp, y, id(font_clock), TextAlign::CENTER, "-0°");
          }

          // Rainfall next hour, min/max temp
          y = yres*7/8;
          if (id(rainfall).has_state() && id(rainfall).state > 0) {
            it.printf(xweather, y, id(font_std), TextAlign::TOP_CENTER, "%.1f mm", id(rainfall).state);
          } else {
            it.print(xweather, y, id(font_std), TextAlign::TOP_CENTER, "        ");
          }
          if (id(tempmin).has_state() && id(tempmax).has_state()) {
            it.printf(xtemp-35, y, id(font_symbol), TextAlign::TOP_CENTER, "▲%.0f°▼%.0f°", id(tempmin).state, id(tempmax).state);
          }


          // Spotify
          #define xtitle xcalendar
          #define ytitle yres*5/8
          #define xprogress_left (xres/2 + xpad)
          #define xprogress_right (xres - xpad)
          #define yprogress yres*7/8
          #define ypad 5
          #define ytime (yprogress + ypad)
          #define progress_width (xprogress_right - xprogress_left)
          #define imgsize 160
          #define imgpad xpad
          #define ximg (xres - imgsize - imgpad)
          #define yimg (yres/2 + imgpad)
          #define title_length 19

          //ESP_LOGD("progress_bar", "xprogress_left %i, _right %i, progress_width %i", xprogress_left, xprogress_right, progress_width);

          if (id(media_state).has_state() && strcmp(id(media_state).state.c_str(), "playing") == 0) {
            it.image(ximg, yimg, id(album_image), COLOR_OFF, COLOR_ON);
            it.rectangle(ximg, yimg, imgsize, imgsize);
            if (id(media_title).has_state() && id(media_artist).has_state()) {
              it.printf(xtitle, ytitle, id(font_media_title), TextAlign::BOTTOM_LEFT, "%s", id(media_title).state.substr(0, title_length).c_str());
              it.printf(xtitle, ytitle, id(font_std), TextAlign::TOP_LEFT, "%s", id(media_artist).state.substr(0, title_length).c_str());
            }

            // Progress bar
            if (id(media_duration).has_state() && id(media_start).has_state()) {
              double t_now = id(tm).now().timestamp;  // Unix time now
              double t_start = id(media_start).state + 1.6e9;  // Unix time that track started, bug in mqtt that loses precision on large numbers
              int t_elapsed = int(t_now - t_start);  // seconds into the track
              int t_remain = int((t_elapsed - id(media_duration).state) * -1);
              //ESP_LOGD("progress_bar", "t_now %f, t_start %f, t_elapsed %i, t_remain %i, media_duration %f", t_now, t_start, t_elapsed, t_remain, id(media_duration).state);

              if (t_remain >= 0) {
                // Elapsed and remaining time
                it.printf(xprogress_left, ytime, id(font_std), TextAlign::TOP_LEFT, "%i:%02i", t_elapsed/60, t_elapsed%60);
                it.printf(xprogress_right, ytime, id(font_std), TextAlign::TOP_RIGHT, "-%i:%02i", t_remain/60, t_remain%60);

                double progress_elapsed = double(progress_width) * double(t_elapsed) / double(id(media_duration).state);
                it.filled_rectangle(xprogress_left, yprogress-1, progress_width, 3);  // full-time bar
                it.filled_rectangle(xprogress_left, yprogress-3, progress_elapsed, 6);  // elapsed bad
                it.filled_circle(xprogress_left+progress_elapsed, yprogress, 8);
                //ESP_LOGD("progress_bar", "progress_width %i, progress_elapsed %f", progress_width, progress_elapsed);
              }
            }
          } else {
            it.print(xres*3/4, yres*5/8, id(font_std), TextAlign::BOTTOM_CENTER, "Play something unexpected");
            it.print(xres*3/4, yres*6/8, id(mdi_weather), TextAlign::CENTER, "\U000F04C7");
          }


sensor:
  - platform: mqtt_subscribe
    topic: epaper/wx/temp
    id: temperature
  - platform: mqtt_subscribe
    topic: epaper/wx/min
    id: tempmin
  - platform: mqtt_subscribe
    topic: epaper/wx/max
    id: tempmax
  - platform: mqtt_subscribe
    topic: epaper/wx/rain
    id: rainfall
  - platform: mqtt_subscribe
    topic: epaper/spotify/duration
    id: media_duration
  - platform: mqtt_subscribe
    topic: epaper/spotify/start
    id: media_start

text_sensor:
  - platform: mqtt_subscribe
    topic: epaper/wx/icon
    id: weather
  - platform: mqtt_subscribe
    topic: epaper/wx/rainsparkline
    id: rainsparkline
  - platform: mqtt_subscribe
    id: next_event
    topic: epaper/nextevent
  - platform: mqtt_subscribe
    topic: epaper/spotify/state
    id: media_state
  - platform: mqtt_subscribe
    topic: epaper/spotify/artist
    id: media_artist
  - platform: mqtt_subscribe
    topic: epaper/spotify/title
    id: media_title

binary_sensor:
  - platform: gpio
    id: push_button
    pin: 
      number: GPIO39
      inverted: true
    filters:
      - delayed_off: 50ms
    on_press:
      then:
        - component.update: epaper
